PROCEDURE Dot_product(v1,v2: ARRAY_OF INTEGER, VAR dot: INTEGER)
VAR
    i:INTEGER;
BEGIN
    dot=0;
    i:=0;
    IF (v1.length <> v2.length) THEN
        Write("vectors with different sizes we cannot calculate dot product");
        dot := NaN; // NaN : not definite number
    END_IF
    WHILE (i <v1.length ) DO
        dot := dot + v1[i]*v2[i];
    END_WHILE
END
END

ALGORITHM orthogonal_vectors
VAR
    v1,v2:INTEGER;
    dot:INTEGER;
BEGIN
    // Read Size of elements of V1 
    n1 := read_size();
    // Read elements of V1
    read_array(n1,v1);
     // Read Size of elements of V2
    n2 := read_size();
    // Read elements of V2
    read_array(n2,v2);
    Dot_product(v1,v2,dot);
    IF (dot=0) THEN
        write("vectors are orthogonals")
        ELSE
        write("vectors are not orthogonals")
    END_IF
END

FUNCTION Dot_product(v1,v2:ARRAY_OF INTEGER) : INTEGER
VAR
    i,dot:INTEGER;
  
BEGIN
    dot :=0;
    i:=0;
    IF (v1.length <> v2.length) THEN
        Write("vectors with different sizes we cannot calculate dot product");
        RETURN NaN; // NaN : not definite number
    END_IF
    WHILE (i <v1.length ) DO
        dot := dot + v1[i]*v2[i];
    END_WHILE
    RETURN dot ;
END

ALGORITHM orthogonal_vectors
VAR
    v1,v2:INTEGER;
    dot:INTEGER;
BEGIN
    // Read Size of elements of V1 
    n1 := read_size();
    // Read elements of V1
    read_array(n1,v1);
     // Read Size of elements of V2
    n2 := read_size();
    // Read elements of V2
    read_array(n2,v2);
    dot:= Dot_product(v1,v2)
    IF (dot=0) THEN
        write("vectors are orthogonals")
        ELSE
        write("vectors are not orthogonals")
    END_IF
END
